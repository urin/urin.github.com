<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
  <channel>
    <title>URIN HACK</title>
    <description>URIN HACK - うりん</description>
    <link>http://urin.github.io/rss.xml</link>
    <link>http://urin.github.io</link>
    <lastBuildDate>2014-02-13T00:58:53+05:30</lastBuildDate>
    <pubDate>2014-02-12T00:00:00+05:30</pubDate>
    <ttl>1800</ttl>

    <item>
      <title>設置が超簡単でカスタマイズ性の高い吹き出しホバー用jQueryプラグインjquery.balloon.js</title>
      <description>&lt;p&gt;設置が超簡単でカスタマイズ性の高い吹き出しホバー用&lt;code&gt;jQuery&lt;/code&gt;プラグイン&lt;code&gt;jquery.balloon.js&lt;/code&gt;の使い方。
設置方法は&lt;code&gt;jQuery&lt;/code&gt;と本プラグインの&lt;code&gt;javascript&lt;/code&gt;ファイルのみで&lt;code&gt;CSS&lt;/code&gt;や画像などは不要。どこにでも簡単に設置することができる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/jquery.balloon.js&quot; title=&quot;デモページヘ&quot; class=&quot;block&quot;&gt;&lt;img src=&quot;/img/posts/2014/2014-02-11-jquery.balloon.js-demo-screenshot.png&quot; alt=&quot;jquery.balloon.js demo page&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;設置方法&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;プラグインをダウンロードして、&lt;code&gt;jQuery&lt;/code&gt;の後にスクリプトファイルを読み込む。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;js/jquery.balloon.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;ドキュメントの&lt;code&gt;ready&lt;/code&gt;イベント（など）で&lt;code&gt;$().balloon(options)&lt;/code&gt;を実行する。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;selectors&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;balloon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;デモとダウンロード&lt;/h3&gt;

&lt;p&gt;以下がデモページ。最新版のダウンロードリンクはデモページ内にある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/jquery.balloon.js&quot; title=&quot;デモページヘ&quot; class=&quot;block&quot;&gt;&lt;img src=&quot;/img/posts/2014/2014-02-11-jquery.balloon.js-demo-thumbnail.png&quot; alt=&quot;jquery.balloon.js demo page&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;オプション&lt;/h3&gt;

&lt;div class=&quot;panel panel-default&quot;&gt;
  &lt;table class=&quot;table table-bordered table-striped table-hover&quot;&gt;
    &lt;thead&gt;
      &lt;tr&gt;&lt;th colspan=&quot;2&quot; style=&quot;width: 250px;&quot;&gt;オプション&lt;/th&gt;&lt;th style=&quot;width: 250px;&quot;&gt;デフォルト値&lt;/th&gt;&lt;th&gt;説明&lt;/th&gt;&lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;contents&lt;/td&gt;
        &lt;td&gt;null&lt;/td&gt;
        &lt;td&gt;吹き出しの内容。文字列（HTML）、jQueryオブジェクト、&lt;code&gt;null&lt;/code&gt;のいずれか。&lt;code&gt;null&lt;/code&gt;の場合は、対象となる要素の&lt;code&gt;title&lt;/code&gt;属性を使用する。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;url&lt;/td&gt;
        &lt;td&gt;null&lt;/td&gt;
        &lt;td&gt;吹き出しの内容をAjax取得する場合に使用されるURL。Ajaxでの取得完了までの間は、&lt;code&gt;contents&lt;/code&gt;が使用され、Ajaxでのデータ取得完了で、その内容に置き換えられる。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;ajaxComplete&lt;/td&gt;
        &lt;td&gt;null&lt;/td&gt;
        &lt;td&gt;Ajaxでのデータ取得完了時コールバック関数。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;classname&lt;/td&gt;
        &lt;td&gt;null&lt;/td&gt;
        &lt;td&gt;吹き出しに付加されるclass名。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;position&lt;/td&gt;
        &lt;td&gt;&quot;top&quot;&lt;/td&gt;
        &lt;td&gt;吹き出し表示の位置。対象の要素位置（中心）からの相対位置を文字列で指定する。&lt;code&gt;&quot;top&quot;&lt;/code&gt;, &lt;code&gt;&quot;bottom&quot;&lt;/code&gt;, &lt;code&gt;&quot;left&quot;&lt;/code&gt;, &lt;code&gt;&quot;right&quot;&lt;/code&gt;のいずれか（２つまで）をスペースで区切って指定。例えば&lt;code&gt;&quot;bottom&quot;&lt;/code&gt;を指定した場合、縦方向の位置は要素の下端で、横方向の位置は対象の中心となる。&lt;code&gt;null&lt;/code&gt;の場合は、要素の中心と吹き出しの中心が同じになる。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;offsetX&lt;/td&gt;
        &lt;td&gt;0&lt;/td&gt;
        &lt;td&gt;微調整用の横方向位置オフセット。プラスの値を指定すると画面右方向にシフトする。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;offsetY&lt;/td&gt;
        &lt;td&gt;0&lt;/td&gt;
        &lt;td&gt;微調整用の縦方向位置オフセット。プラスの値を指定すると画面上方向にシフトする。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;tipSize&lt;/td&gt;
        &lt;td&gt;12&lt;/td&gt;
        &lt;td&gt;吹き出し端に付く正三角形のサイズ（高さ）をピクセル単位の整数値で指定する。0だと三角形はつかない。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;minLifeTime&lt;br /&gt;
        &lt;td&gt;200&lt;/td&gt;
        &lt;td&gt;マウスポインタが対象の要素から離れて（&lt;code&gt;mouseleave&lt;/code&gt;）から、この時間（ミリ秒）の間は吹き出しを表示し続ける。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;showDuration&lt;br /&gt;
        &lt;td&gt;100&lt;/td&gt;
        &lt;td&gt;吹き出しを表示するときのアニメーション時間。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;showAnimation&lt;br /&gt;
        &lt;td&gt;null&lt;/td&gt;
        &lt;td&gt;吹き出しを表示するときのアニメーション関数。この関数には&lt;code&gt;onDuration&lt;/code&gt;が引数として与えられる。&lt;code&gt;null&lt;/code&gt;を指定した場合は&lt;code&gt;$().show()&lt;/code&gt;を使用する。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;hideDuration&lt;br /&gt;
        &lt;td&gt;80&lt;/td&gt;
        &lt;td&gt;吹き出しを非表示にするときのアニメーション時間。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;hideAnimation&lt;br /&gt;
        &lt;td&gt;function (d) { this.fadeOut(d); }&lt;/td&gt;
        &lt;td&gt;吹き出しを非表示にするときのアニメーション関数。この関数には&lt;code&gt;offDuration&lt;/code&gt;が引数として与えられる。&lt;code&gt;null&lt;/code&gt;を指定した場合は&lt;code&gt;$().hide()&lt;/code&gt;を使用する。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td rowspan=&quot;11&quot; style=&quot;padding-left: 20px; padding-right: 20px; border-bottom: none; border-right: 1px solid #dddddd; background-color: #fafafa;&quot;&gt;css&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;minWidth&lt;/td&gt;
        &lt;td&gt;&quot;20px&quot;&lt;/td&gt;
        &lt;td rowspan=&quot;10&quot;&gt;吹き出しのスタイル。jQueryのcssと同様で、キャメルケースのオブジェクトを用いてスタイルを指定する。この表に書かれているのはデフォルト値が設定されているもののみで、これら以外も自由に指定可能。&lt;code&gt;css&lt;/code&gt;に&lt;code&gt;null&lt;/code&gt;を設定すると、本プラグインデフォルトで指定されているcssがキャンセルされる。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;padding&lt;/td&gt;
        &lt;td&gt;&quot;5px&quot;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;borderRadius&lt;/td&gt;
        &lt;td&gt;&quot;6px&quot;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;border&lt;/td&gt;
        &lt;td&gt;&quot;solid 1px #777&quot;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;boxShadow&lt;/td&gt;
        &lt;td&gt;&quot;4px 4px 4px #555&quot;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;color&lt;/td&gt;
        &lt;td&gt;&quot;#666&quot;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;backgroundColor&lt;/td&gt;
        &lt;td&gt;&quot;#efefef&quot;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;opacity&lt;/td&gt;
        &lt;td&gt;&quot;0.85&quot;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;zIndex&lt;/td&gt;
        &lt;td&gt;&quot;32767&quot;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;textAlign&lt;/td&gt;
        &lt;td&gt;&quot;left&quot;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;h3&gt;以下で紹介されています&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webcreatorbox.com/tech/nav-menu/&quot;&gt;もうユーザーを迷わせない！ナビゲーションメニュー設置のコツ | Webクリエイターボックス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jqueryscript.net/tooltip/Easy-User-friendly-Tooltip-Plugin-For-jQuery-balloon-js.html&quot;&gt;Easy &amp;amp; User-friendly Tooltip Plugin For jQuery - balloon.js | Free jQuery Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://thewebthought.blogspot.com/2011/06/jquery-tips-with-jqueryballoonjs.html&quot;&gt;jQuery: tips with jquery.balloon.js | the web thought&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://programming-10000.hatenadiary.jp/entry/20130926/1380175857&quot;&gt;jQueryプラグインballoon.jsを使って吹き出し表示したり非表示にする方法。入力値をチェックして、注意書きを吹き出しで表示するサンプルを作ってみる。 - 感謝のプログラミング 10000時間&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ginpro.winofsql.jp/article/386285907.html&quot;&gt;jQuery プラグイン jquery.balloon.js の外部からのコントロール : GINPRO / SQLの窓と銀プログラマ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pb-times.jp/P_51f721519314d&quot;&gt;jQueryで簡単に吹き出しをポップアップ | PbTimes 情報誌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
      <link>http://urin.github.io/posts/2014/jquery-balloon-js</link>
      <guid>http://urin.github.io//posts/2014/jquery-balloon-js</guid>
      <pubDate>2014-02-12T00:00:00+05:30</pubDate>
    </item>

    <item>
      <title>要素の高さを揃える超軽量なjQueryプラグインjquery.tile.js</title>
      <description>&lt;p&gt;ブロック要素の高さを揃える軽量な&lt;code&gt;jQuery&lt;/code&gt;プラグイン&lt;code&gt;jquery.tile.js&lt;/code&gt;。このプラグインを使用するとブロック要素を簡単にタイル状に並べることができる。
このプラグインには余分な機能が一切無いため &lt;strong&gt;使い方がシンプルでプラグインは非常に軽量&lt;/strong&gt; になっている。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;を使用しないで要素の高さ揃える場合は&lt;code&gt;HTML&lt;/code&gt;の&lt;code&gt;table&lt;/code&gt;要素を使う、&lt;code&gt;CSS&lt;/code&gt;の&lt;code&gt;display: table&lt;/code&gt;を使用する、&lt;code&gt;float: left&lt;/code&gt;で横に並べて&lt;code&gt;margin-bottom&lt;/code&gt;を大きくするなどの方法が考えられるが、デザイン面で融通が効きにくく初心者にとっては少し敷居が高い。
要素を横に並べるには&lt;code&gt;float: left&lt;/code&gt;や&lt;code&gt;display: inline-block&lt;/code&gt;などを用いるのが最も簡単だが、この場合&lt;code&gt;HTML&lt;/code&gt;と&lt;code&gt;CSS&lt;/code&gt;だけで要素の高さを自動的に揃えるのは（特にそれが複数行あったり各要素の高さが内容物に応じて可変だった場合）簡単ではない。
CSS3の使用が認められる場合には&lt;code&gt;flexbox&lt;/code&gt;レイアウトを用いるのが最もスマートであるが現時点でCSS3の使用が全面的に認められるケースはそう多くはない。&lt;/p&gt;

&lt;p&gt;このプラグインはブログ形式のWebサイトでサイドバーと本体の高さを揃えたい場合などにも使用することができる。&lt;/p&gt;

&lt;h3&gt;デモ・ダウンロード&lt;/h3&gt;

&lt;p&gt;以下のデモページ（画像をクリック）ではクリックすると実行結果が表示されるので実行前と実行後の見た目の変化がわかる。ダウンロードリンクはデモページの最下部にある。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/jquery.tile.js&quot; title=&quot;デモページヘ&quot; class=&quot;block&quot;&gt;&lt;img src=&quot;/img/posts/2013/2013-08-11-jquery-tile-js-demos-thumbnail.png&quot; alt=&quot;jquery.tile.js&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;使用方法１―全ての要素の高さを揃える&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;指定した複数の要素の高さをその中の最大の高さに揃える。

&lt;ul&gt;
&lt;li&gt;各要素の幅が同じであれば各要素のサイズ（高さ・幅）は全て同じになりタイル状に要素が並ぶ。&lt;/li&gt;
&lt;li&gt;各要素に対して&lt;code&gt;height&lt;/code&gt;を指定する必要はない。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;JavaScriptサンプル&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;tile-sample1&lt;/code&gt;という&lt;code&gt;class&lt;/code&gt;属性を持つ要素の高さをその中の最大の高さで揃えるには以下のように記述する。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.tile-sample1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;実行したときのイメージ&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/2013/2013-08-11-tile1-before.png&quot; alt=&quot;jquery.tile.js&quot;&gt;
&lt;i class=&quot;icon-arrow-down&quot; style=&quot;display: block; margin: 10px auto; font-size: 40px&quot;&gt;&lt;/i&gt;
&lt;img src=&quot;/img/posts/2013/2013-08-11-tile1-after.png&quot; alt=&quot;jquery.tile.js&quot;&gt;&lt;/p&gt;

&lt;h3&gt;使用方法２―同じ行にある要素の高さを揃える&lt;/h3&gt;

&lt;p&gt;１行に含まれる要素の数（列数）を指定して同じ行に並ぶ要素の中で最大の高さに揃える。&lt;/p&gt;

&lt;h4&gt;JavaScriptサンプル&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;tile-sample2&lt;/code&gt;という&lt;code&gt;class&lt;/code&gt;属性を持つ要素が横に４つ並んでいるとき横に並んだ要素の高さを各行毎に揃えるにはその列数（＝４）を引数に指定する。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;js language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.tile-sample2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;実行したときのイメージ&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts/2013/2013-08-11-tile2-before.png&quot; alt=&quot;jquery.tile.js&quot;&gt;
&lt;i class=&quot;icon-arrow-down&quot; style=&quot;display: block; margin: 10px auto; font-size: 40px&quot;&gt;&lt;/i&gt;
&lt;img src=&quot;/img/posts/2013/2013-08-11-tile2-after.png&quot; alt=&quot;jquery.tile.js&quot;&gt;&lt;/p&gt;

&lt;h3&gt;以下で紹介されています&lt;/h3&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://furoshiki.hatenadiary.jp/entry/2014/01/20/044348&quot;&gt;日本人が開発したJavaScriptライブラリ、エンジニア別国内利用率ランキング - ふろしき.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//liginc.co.jp/web/js/jquery/22340#contents&quot;&gt;見た目を綺麗に整列する！ブロックレベル要素の高さを揃えるJS3選 | 株式会社LIG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//qiita.com/ituki_b/items/ddbf2dc96e6e746a8c1f&quot;&gt;jQuery - 横並びしてる要素の高さをそろえ、要素が削除されたあともまた高さをそろえる - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//www.ilovex.co.jp/blog/system/html/js2.html#main-content&quot;&gt;リストの高さを揃える便利なJS（2） | システム開発ブログ(システム開発のアイロベックス)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//1bit.mobi/20111025170154.html&quot;&gt;ブロック要素の天地を揃えるのはjquery.tile.jsが一番便利でした | 1bit::memo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description>
      <link>http://urin.github.io/posts/2013/release-jquery-tile-js</link>
      <guid>http://urin.github.io//posts/2013/release-jquery-tile-js</guid>
      <pubDate>2013-08-11T00:00:00+05:30</pubDate>
    </item>

    <item>
      <title>シンプルで応用の効くmakefileとその解説</title>
      <description>&lt;p&gt;&lt;code&gt;makefile&lt;/code&gt;は一度作るとそれ以降編集する機会が少なくなるので意外と真面目に考える人は少なく、ネット上でもまとまった情報は多くない。&lt;/p&gt;

&lt;p&gt;Linux系OS上（正確に言うとGNU MakeとGCC）で複数の&lt;code&gt;C/C++&lt;/code&gt;ソースファイルから１つの実行ファイルを作成(&lt;code&gt;make&lt;/code&gt;)するための汎用的な&lt;code&gt;makefile&lt;/code&gt;テンプレートを作った。名前はまだない。適宜ディレクトリ構成や設計などに従って&lt;code&gt;makefile&lt;/code&gt;をカスタマイズする必要があると思うがそのベースにする。&lt;/p&gt;

&lt;h2&gt;このmakefileのいいところ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;コンパイル対象となるソースファイルをワイルドカードで指定できる。&lt;/li&gt;
&lt;li&gt;ヘッダファイル、ライブラリ、オブジェクトファイルなどコンパイル、リンクに関連するどのファイルが外部で変更されていてもきちんと &lt;strong&gt;差分&lt;/strong&gt; コンパイルされる。&lt;/li&gt;
&lt;li&gt;makefile自体に説明書（この記事）がある。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;makefile&lt;/h2&gt;

&lt;p&gt;※makefileではタブ文字に重要な意味があるが都合によりタブ文字をスペース４文字に置き換えている。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//gist.github.com/urin/5971408#file-makefile&quot;&gt;そのまま使えるソースはこちら&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;makefile language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span class=&quot;nv&quot;&gt;COMPILER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; g++
&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -Wextra -g -MMD -MP
&lt;span class=&quot;nv&quot;&gt;LDFLAGS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LIBS&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;INCLUDE&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -I../include
&lt;span class=&quot;nv&quot;&gt;TARGET&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ../bin/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell basename &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;readlink -f ..&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OBJDIR&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ./obj
&lt;span class=&quot;cp&quot;&gt;ifeq &amp;quot;$(strip $(OBJDIR))&amp;quot; &amp;quot;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;OBJDIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; .
&lt;span class=&quot;cp&quot;&gt;endif&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SOURCES&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wildcard *.cpp&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;OBJECTS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;addprefix &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;OBJDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/, &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;SOURCES:.cpp&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.o&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DEPENDS&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;OBJECTS:.o&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.d&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;TARGET&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;OBJECTS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LIBS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;COMPILER&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -o &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$^&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LDFLAGS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;OBJDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/%.o: %.cpp
    @&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;OBJDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; mkdir -p &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;OBJDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;COMPILER&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CFLAGS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;INCLUDE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -o &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; -c &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt;

all: clean &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;TARGET&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

clean:
    rm -f &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;OBJECTS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DEPENDS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;TARGET&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    @rmdir --ignore-fail-on-non-empty &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;readlink -f &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;OBJDIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;-include $(DEPENDS)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;使用方法&lt;/h2&gt;

&lt;h4&gt;&lt;code&gt;make&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;基本的には&lt;code&gt;make&lt;/code&gt;するだけで依存関係を考慮して差分コンパイルされる。
ソースファイルはもちろん、ヘッダファイル、ライブラリなどが更新されている場合も自動的に検出して差分コンパイルされる。&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;make all&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;強制的に全ソースをコンパイルしたい場合は&lt;code&gt;make all&lt;/code&gt;する。
このコマンドは全ての中間ファイル（オブジェクトファイル、依存関係ファイル）と実行ファイルを削除してから全ソースをコンパイルする。&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;make clean&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;全ての中間ファイル（オブジェクトファイル、依存関係ファイル）と実行ファイルを削除する。&lt;/p&gt;

&lt;h2&gt;初期設定状態のmakefile&lt;/h2&gt;

&lt;p&gt;下記のようなディレクトリツリーで初期設定の&lt;code&gt;makefile&lt;/code&gt;を用いて&lt;code&gt;make&lt;/code&gt;を実行した場合、以下の矢印(&amp;lt;-)ようにファイルが生成される。
同一のディレクトリに存在する全てのcppファイルがコンパイル（及びリンク）対象となる。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;example
|-- bin
|   `-- example    &amp;lt;- (TARGET) 実行ファイル
|-- include
|   `-- main.h
`-- source
    |-- main.cpp
    |-- makefile
    `-- obj        &amp;lt;- (OBJDIR) 中間ファイル生成先ディレクトリ
        |-- main.d &amp;lt;- (DEPENDS) 依存関係ファイル
        `-- main.o &amp;lt;- (OBJECTS) オブジェクトファイル
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;解説&lt;/h2&gt;

&lt;h3&gt;コンパイラの指定 (&lt;code&gt;COMPILER&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;コンパイラは&lt;code&gt;COMPILER&lt;/code&gt;の値を用いる。初期値は&lt;code&gt;g++&lt;/code&gt;。C言語のみの場合は&lt;code&gt;gcc&lt;/code&gt;に変更しても良いが基本的には&lt;code&gt;g++&lt;/code&gt;で問題ない。&lt;/p&gt;

&lt;h3&gt;コンパイルオプション (&lt;code&gt;CFLAGS&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;コンパイルオプションとして&lt;code&gt;CFLAGS&lt;/code&gt;の値を用いる。&lt;code&gt;-D&lt;/code&gt;オプションによる&lt;code&gt;#define&lt;/code&gt;の追加、最適化オプション、コードカバレッジ用の&lt;code&gt;-coverage&lt;/code&gt;などを用いる場合はここに記述する。&lt;/p&gt;

&lt;p&gt;以下は初期値の解説。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-Wextra&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;コンパイルワーニングのレベルを最大にする。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Wall&lt;/code&gt;よりも強力。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-g&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;デバッグオプション。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gdb&lt;/code&gt;でのデバッグを可能にする。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-MMD -MP&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;ソースファイルの依存関係を中間ファイルに出力する。&lt;/li&gt;
&lt;li&gt;依存関係ファイルはソースファイル名の拡張子を&lt;code&gt;.d&lt;/code&gt;に変更したものとなり、&lt;code&gt;OBJDIR&lt;/code&gt;で指定したディレクトリに生成される。&lt;/li&gt;
&lt;li&gt;この依存関係ファイルは&lt;code&gt;makefile&lt;/code&gt;最後の&lt;code&gt;include&lt;/code&gt;文にてインクルードされることで依存しているヘッダファイル等が変更された場合に自動的に再コンパイルされるようになる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;リンクオプション (&lt;code&gt;LDFLAGS&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;リンクオプションとして&lt;code&gt;LDFLAGS&lt;/code&gt;の値を用いる。初期値は空。
標準ライブラリをリンクする&lt;code&gt;-l&lt;/code&gt;オプションやコードカバレッジ用の&lt;code&gt;-coverage&lt;/code&gt;などを用いる場合はここに記述する。&lt;/p&gt;

&lt;h3&gt;ライブラリの指定 (&lt;code&gt;LIBS&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;リンクするライブラリとして&lt;code&gt;LIBS&lt;/code&gt;の値を用いる。初期値は空。
静的ライブラリ（&lt;code&gt;*.a&lt;/code&gt;）や動的ライブラリ（&lt;code&gt;*.so&lt;/code&gt;）などを用いる場合、空白区切りでファイル名（相対パス、絶対パス）を記述する。
ここで指定したライブラリが更新された場合、&lt;code&gt;make&lt;/code&gt;は再コンパイルが必要だと認識する。&lt;/p&gt;

&lt;h3&gt;インクルードパスの指定 (&lt;code&gt;INCLUDE&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;インクルードパスとして&lt;code&gt;INCLUDE&lt;/code&gt;の値を用いる。初期値は&lt;code&gt;-I../include&lt;/code&gt;。
ソースファイル中の&lt;code&gt;#include&lt;/code&gt;ファイル検索パスに加えるパスを&lt;code&gt;-I&lt;/code&gt;オプションにて指定する。&lt;code&gt;-I&lt;/code&gt;オプションとディレクトリ名の間に空白を書くことはできない。
複数ディレクトリを指定したい場合は&lt;code&gt;-I&lt;/code&gt;オプションを空白区切りで複数指定する。&lt;/p&gt;

&lt;h3&gt;実行ファイルの指定 (&lt;code&gt;TARGET&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;実行ファイル名として&lt;code&gt;TARGET&lt;/code&gt;の値を用いる。
以下は初期値 &lt;code&gt; ../bin/$(shell basename `readlink -f ..`) &lt;/code&gt;の解説。
実行ファイルの生成先のディレクトリは&lt;code&gt;../bin&lt;/code&gt;。
生成される実行ファイル名は &lt;code&gt; $(shell basename `readlink -f ..`) &lt;/code&gt;である。
これは&lt;code&gt;makefile&lt;/code&gt;の存在するディレクトリの親ディレクトリの名前である。
つまり、以下の様なディレクトリ構成の場合、&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;example
|-- bin
`-- source
    |-- main.cpp
    `-- makefile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;example&lt;/code&gt;という名前の実行ファイルが&lt;code&gt;example/bin&lt;/code&gt;に生成されることになる。&lt;/p&gt;

&lt;h3&gt;中間ファイル生成先ディレクトリの指定 (&lt;code&gt;OBJDIR&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;中間ファイル生成先ディレクトリとして&lt;code&gt;OBJDIR&lt;/code&gt;の値を用いる。初期値は&lt;code&gt;./obj&lt;/code&gt;。
このフォルダにオブジェクトファイル(&lt;code&gt;*.o&lt;/code&gt;)や依存関係ファイル(&lt;code&gt;*.d&lt;/code&gt;)が生成される。&lt;/p&gt;

&lt;h3&gt;ソースファイルの指定 (&lt;code&gt;SOURCES&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;コンパイル対象となるソースファイルとして&lt;code&gt;SOURCES&lt;/code&gt;の値を用いる。初期値は&lt;code&gt;$(wildcard *.cpp)&lt;/code&gt;。
これは&lt;code&gt;makefile&lt;/code&gt;と同一ディレクトリに存在する拡張子&lt;code&gt;cpp&lt;/code&gt;のファイル全てをコンパイル対象とすることを意味する。別の拡張子(&lt;code&gt;.c&lt;/code&gt;など)に変更したい場合は、&lt;code&gt;makefile&lt;/code&gt;内の&lt;code&gt;cpp&lt;/code&gt;を全て変更する。&lt;/p&gt;

&lt;h3&gt;オブジェクトファイルの指定 (&lt;code&gt;OBJECTS&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;オブジェクトファイルとして&lt;code&gt;OBJECTS&lt;/code&gt;の値を用いる。
以下は初期値 &lt;code&gt;$(addprefix $(OBJDIR)/, $(SOURCES:.cpp=.o))&lt;/code&gt;の解説。
オブジェクトファイルの生成先ディレクトリは&lt;code&gt;OBJDIR&lt;/code&gt;。
オブジェクトファイル名はソースファイル(&lt;code&gt;SOURCES&lt;/code&gt;)の拡張子を&lt;code&gt;.o&lt;/code&gt;に置換したものである。
&lt;code&gt;OBJDIR&lt;/code&gt;が空の場合はソースファイルと同一のディレクトリに生成される。&lt;/p&gt;

&lt;h3&gt;依存関係ファイルの指定 (&lt;code&gt;DEPENDS&lt;/code&gt;)&lt;/h3&gt;

&lt;p&gt;依存関係ファイルとして&lt;code&gt;DEPENDS&lt;/code&gt;の値を用いる。
初期値&lt;code&gt;$(OBJECTS:.o=.d)&lt;/code&gt;はオブジェクトファイルの拡張子を&lt;code&gt;.d&lt;/code&gt;に置換したものである。&lt;/p&gt;

&lt;p&gt;そんじゃーね。&lt;/p&gt;
</description>
      <link>http://urin.github.io/posts/2013/simple-makefile-for-clang</link>
      <guid>http://urin.github.io//posts/2013/simple-makefile-for-clang</guid>
      <pubDate>2013-08-10T00:00:00+05:30</pubDate>
    </item>

    <item>
      <title>Jekyll 1.1系をWindowsに導入する</title>
      <description>&lt;p&gt;現時点で最新版の&lt;code&gt;jekyll-1.1.2&lt;/code&gt;をインストールしてみる。Rubyは&lt;code&gt;1.9.3&lt;/code&gt;でやったが&lt;code&gt;2.0.0&lt;/code&gt;でも多分問題ない。&lt;/p&gt;

&lt;h3&gt;Pythonをインストール&lt;/h3&gt;

&lt;p&gt;シンタックスハイライト用の&lt;code&gt;pygments.rb&lt;/code&gt;が使用する。
&lt;code&gt;pygments.rb&lt;/code&gt;によると&lt;code&gt;python&lt;/code&gt;のバージョン&lt;code&gt;2.6&lt;/code&gt;以降であれば何でもいいと書いてあるが、python&lt;code&gt;3&lt;/code&gt;系では動作しない。
よって&lt;code&gt;2.7&lt;/code&gt;をインストールする。&lt;/p&gt;

&lt;p&gt;インストールが終わったら&lt;code&gt;python.exe&lt;/code&gt;のあるディレクトリを&lt;code&gt;PATH&lt;/code&gt;に追加する。&lt;/p&gt;

&lt;h3&gt;easy_install(distribute)をインストール&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;//python-distribute.org/distribute_setup.py&quot;&gt;distribute_setup.py&lt;/a&gt;
をダウンロードしてきて&lt;code&gt;python&lt;/code&gt;で実行するだけ。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat language-bat&quot; data-lang=&quot;bat&quot;&gt;python distribute_setup.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Pygmentsをインストール&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;python&lt;/code&gt;のあるディレクトリに&lt;code&gt;Scripts&lt;/code&gt;フォルダができていてその中に&lt;code&gt;easy_install.exe&lt;/code&gt;がある。
ここで&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat language-bat&quot; data-lang=&quot;bat&quot;&gt;&lt;span class=&quot;k&quot;&gt;cd&lt;/span&gt; Scripts
easy_install Pygments
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とするだけ。&lt;/p&gt;

&lt;h3&gt;pygments.rbのダウングレード&lt;/h3&gt;

&lt;p&gt;シンタックスハイライトを使用しようとすると&lt;code&gt;posix-spawn&lt;/code&gt;やら&lt;code&gt;liquid&lt;/code&gt;やらがエラーを出す。この問題は&lt;a href=&quot;//stackoverflow.com/questions/17364028/jekyll-on-windows-pygments-not-working&quot;&gt;Stack Over Flow&lt;/a&gt;にも挙げられていて対策もあった。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bat language-bat&quot; data-lang=&quot;bat&quot;&gt;gem uninstall -a pygments.rb
gem install pygments.rb --version &lt;span class=&quot;s2&quot;&gt;&amp;quot;=0.5.0&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;とバージョンを&lt;code&gt;0.5.0&lt;/code&gt;に下げる。&lt;/p&gt;

&lt;h3&gt;エンコーディングの固定化&lt;/h3&gt;

&lt;p&gt;日本語を使うと&lt;code&gt;jekyll build&lt;/code&gt;でエラーになるのでファイル読み込み時のエンコーディングを&lt;code&gt;UTF-8&lt;/code&gt;固定にする。デフォルトはシステム標準が採用される（つまりWindows日本語版なら&lt;code&gt;Windows-31J&lt;/code&gt;）が、実際のファイルは全て&lt;code&gt;UTF-8&lt;/code&gt;にしたいので。LinuxやMacなんかではシステムのエンコーディングが&lt;code&gt;UTF-8&lt;/code&gt;だから普通は問題ない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jekyll&lt;/code&gt;本体に手をつけるハックもネット上で見かけたがよろしくない。
デフォルトエンコーディングを変更するだけの&lt;code&gt;.rb&lt;/code&gt;ファイルを&lt;code&gt;_plugins&lt;/code&gt;フォルダに置いて&lt;code&gt;build&lt;/code&gt;すれば&lt;code&gt;jekyll&lt;/code&gt;が&lt;code&gt;UTF-8&lt;/code&gt;固定で動くようになる。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_external&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:UTF_8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上でWindows特有の環境設定関係はほぼ完了。これ以外の設定なんかは&lt;a href=&quot;//jekyllrb.com/docs/home/&quot;&gt;Jekyllの公式ドキュメント&lt;/a&gt;をひと通り見ながらやれば大体OK。&lt;/p&gt;

&lt;p&gt;さあ、快適なJekyllライフをはじめよう。&lt;/p&gt;
</description>
      <link>http://urin.github.io/posts/2013/Setup-jekyll-1.1-to-windows</link>
      <guid>http://urin.github.io//posts/2013/Setup-jekyll-1.1-to-windows</guid>
      <pubDate>2013-08-04T00:00:00+05:30</pubDate>
    </item>

    <item>
      <title>ブログをリニューアル</title>
      <description>&lt;p&gt;ブログを&lt;code&gt;GitHub Pages&lt;/code&gt;に移転して完全にリニューアルした。CMSは&lt;code&gt;Jekyll&lt;/code&gt;でホストは&lt;code&gt;GitHub&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;//jekyllrb.com/&quot;&gt;Jekyll • Simple, blog-aware, static sites&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;去年あたりから忍者ブログのサービス内容がどんどん劣化していってついに我慢が限界に達した。&lt;/p&gt;

&lt;p&gt;何か新しいことが始まるとき、その多くは「負（怒りや悲しみ）」のモチベーションからスタートすると聞いたことがある。まさに、それだ。&lt;/p&gt;

&lt;h2&gt;Jekyllを選択したわけ&lt;/h2&gt;

&lt;p&gt;ブログサービスを選ぶ判断基準は以下。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;無料で容量制限が厳しくない&lt;/li&gt;
&lt;li&gt;将来性がある（１０年間くらいはサービスが継続すると思われる）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTML&lt;/code&gt;や&lt;code&gt;CSS&lt;/code&gt;、&lt;code&gt;Javascript&lt;/code&gt;含めてほぼ完全にカスタマイズできる&lt;/li&gt;
&lt;li&gt;余計な広告が入らない&lt;/li&gt;
&lt;li&gt;記事にも&lt;code&gt;HTML&lt;/code&gt;が使えてコードのシンタックスハイライトなどもできる&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;無料のブログサービスを調べる&lt;/h3&gt;

&lt;p&gt;日本向けのブログサービスを見てみたが、どれも数年前と大きく状況が変わっていないようだった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;//www.ninja.co.jp/blog/&quot;&gt;忍者ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//www.blogger.com/&quot;&gt;Blogger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//hatenablog.com/&quot;&gt;はてなブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//d.hatena.ne.jp/&quot;&gt;はてなダイアリー&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//ameblo.jp/&quot;&gt;Ameba (アメーバ)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//blog.fc2.com/&quot;&gt;FC2ブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//blog.livedoor.com/&quot;&gt;ライブドアブログ(livedoor Blog)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;・・・&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;正直どれもパッとしない。忍者ブログはデザインのカスタマイズ性が高いが記事に&lt;code&gt;HTML&lt;/code&gt;を使うのが難しくなったのが致命的だった。
これら伝統的なブログサービス以外の選択肢としては&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;//www.strikingly.com/&quot;&gt;Strikingly - わずか数分でシンプルで美しいモバイルサイトを作成&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//wordpress.com/&quot;&gt;WordPress.com - Get a Free Blog Here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//wordpress.org/&quot;&gt;WordPress › Blog Tool, Publishing Platform, and CMS&lt;/a&gt;を何らかのサーバ上で運営&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//octopress.org/&quot;&gt;Octopress&lt;/a&gt;をGitHubでホスティング&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//www.edicy.com/&quot;&gt;Edicy — Create a Website — Easy to use Website Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//ja.wix.com/&quot;&gt;WIX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//www.weebly.com/&quot;&gt;Weebly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;//jp.jimdo.com/&quot;&gt;Jimdo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というのもあったが、Googleアナリティクスが使えない、Googleアドセンスが使えない、&lt;code&gt;HTML&lt;/code&gt;、&lt;code&gt;CSS&lt;/code&gt;をカスタマイズ出来ないなど色々と不都合があった。
で、この中では&lt;code&gt;Octopress&lt;/code&gt;が&lt;code&gt;Compass&lt;/code&gt;が使えたり色々といいように見えた。しかし・・・&lt;/p&gt;

&lt;h3&gt;結論&lt;/h3&gt;

&lt;p&gt;完全にカスタマイズできて&lt;code&gt;Octopress&lt;/code&gt;のベースにもなっている&lt;code&gt;Jekyll&lt;/code&gt;が今年リリースされたバージョン&lt;code&gt;0.12.0&lt;/code&gt;あたりから
急激に充実してもはや&lt;code&gt;Octopress&lt;/code&gt;なんていらないんじゃね？という勢いを感じたので&lt;code&gt;Jekyll&lt;/code&gt;を&lt;code&gt;GitHub Pages&lt;/code&gt;にホスティングしてもらう形とした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Jekyll&lt;/code&gt;のスターターキットとして&lt;a href=&quot;//jekyllbootstrap.com/&quot;&gt;Jekyll-Bootstrap&lt;/a&gt;という&lt;code&gt;Twitter Bootstrap 2&lt;/code&gt;を適用したものが良さげではあったが
開発が停滞気味で&lt;code&gt;Jekyll&lt;/code&gt;本体と&lt;code&gt;Bootstrap&lt;/code&gt;の更新に追いついて行けなさそうな予感がしたので結局、こうした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;常に最新の&lt;code&gt;Jekyll&lt;/code&gt;が使えるよう余計なプラグインには頼らないようにする。最悪プラグインを自作しておけば動かなくなった時もすぐに直せる。&lt;/li&gt;
&lt;li&gt;レスポンシブ対応のグリッドシステムを持っていて今後も息が長い&lt;code&gt;CSS&lt;/code&gt;フレームワークを使いたい。ということで&lt;a href=&quot;//getbootstrap.com/&quot;&gt;Bootstrap 3 RC1&lt;/a&gt;を導入。&lt;/li&gt;
&lt;li&gt;アイコンは&lt;code&gt;Web font&lt;/code&gt;がいいので&lt;code&gt;Bootstrap&lt;/code&gt;との相性も良い&lt;a href=&quot;//fortawesome.github.io/Font-Awesome/&quot;&gt;Font Awesome, the iconic font designed for Bootstrap&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デザインやサイトの構造などにこだわりたいプログラマブルエンジニアがブログを書くには最適な環境ではないかと思う。
なにせ依存関係が少ない。安定依存の原則。これ重要。&lt;/p&gt;
</description>
      <link>http://urin.github.io/posts/2013/Renewal</link>
      <guid>http://urin.github.io//posts/2013/Renewal</guid>
      <pubDate>2013-08-03T00:00:00+05:30</pubDate>
    </item>

  </channel>
</rss>
